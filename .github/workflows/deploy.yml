name: Deploy Website
on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/portfolio:latest .
      - name: Save Docker image as artifact
        run: |
          docker save ghcr.io/${{ github.repository_owner }}/portfolio:latest | gzip > portfolio-image.tar.gz
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: portfolio-image
          path: portfolio-image.tar.gz

  ci:
    name: CI in Docker
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: portfolio-image
      - name: Load Docker image
        run: |
          gunzip -c portfolio-image.tar.gz | docker load
      - name: Run CI steps in Docker
        run: |
          docker run --rm ghcr.io/${{ github.repository_owner }}/portfolio:latest yarn install --frozen-lockfile
          docker run --rm ghcr.io/${{ github.repository_owner }}/portfolio:latest yarn lint

  push-image:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs: ci
    environment: Deploy
    permissions:
      packages: write
      contents: read
    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: portfolio-image
      - name: Load Docker image
        run: |
          gunzip -c portfolio-image.tar.gz | docker load
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/portfolio:latest

  deploy:
    name: Deploy to Server via SSH
    runs-on: ubuntu-latest
    needs: push-image
    environment: Production
    permissions:
      packages: read
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ~/deployments/portfolio
            git pull origin main
            rm -f .env
            touch .env
            echo APP_PORT=${{ vars.APP_PORT }} > .env
            echo NUXT_SITE_URL=${{ vars.SITE_URL }} > .env
            echo NUXT_SITE_NAME=${{ vars.SITE_NAME }} >> .env
            echo NUXT_OAUTH_GITHUB_CLIENT_ID=${{ secrets.OAUTH_GITHUB_CLIENT_ID }} >> .env
            echo NUXT_OAUTH_GITHUB_CLIENT_SECRET=${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo NUXT_SESSION_PASSWORD=${{ secrets.SESSION_PASSWORD }} >> .env
            echo NUXT_AUTHORIZED_EMAIL=${{ secrets.AUTHORIZED_EMAIL }} >> .env
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
            docker compose pull
            docker compose down
            docker compose up -d --remove-orphans
            docker system prune -f
